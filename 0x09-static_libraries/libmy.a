!<arch>
0-isupper.c/    0           0     0     644     240       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: takes in a character
 * Return: 1 if uppercase, 0 if otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     274       `
#include "main.h"

/**
 * *_memset - fills memory with constant byte
 * @s: pointer
 * @b: byte
 * @n: number of bytes to fill
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     331       `
#include "main.h"

/**
 * *_strcat - concatenates two strings
 * @dest: pointer
 * @src: pointer
 * Return: pointer to the string dest
 */

char *_strcat(char *dest, char *src)
{
	int i = 0, j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     413       `
#include "main.h"

/**
 * _atoi - converts string to integer
 * @s: takes in a string
 * Return: Always 0
 */

int _atoi(char *s)
{
	int sign = 1, i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		res = (res * 10) + (s[i] - '0');
		i++;
	}
	res *= sign;
	return (res);
}

1-isdigit.c/    0           0     0     644     236       `
#include "main.h"

/**
 * _isdigit - checks for a digit
 * @c: takes in a number
 * Return: 1 if digit, 0 if otherwise
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}
1-memcpy.c/     0           0     0     644     286       `
#include "main.h"

/**
 * *_memcpy - copies memory area
 * @dest: pointer
 * @src: pointer
 * @n: number of bytes
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		*(dest + i) = *(src + i);
		i++;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     392       `
#include "main.h"

/**
 * *_strncat - concatenates two strings
 * @dest: pointer
 * @src: pointer
 * @n: number of bytes
 * Return: pointer to the string dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0' && n > j)
	{
		dest[i] = src[j];
		j++;
		i++;
	}

	if (n > 0)
	{
		dest[i] = '\0';
	}

	return (dest);
}
2-strchr.c/     0           0     0     644     304       `
#include "main.h"

/**
 * *_strchr - locates character in a string
 * @s: string
 * @c: character
 * Return: NULL if charcter not found, c otherwise
 */

char *_strchr(char *s, char c)
{
	unsigned int i;

	for (i = 0; s[i] != '\0'; i++)
		if (s[i] == c)
			break;
	return (s[i] == c ? (s + i) : '\0');
}
2-strlen.c/     0           0     0     644     232       `
#include "main.h"

/**
 * _strlen - shows length of a string
 * @s: takes in a character
 * Return: length of string
 */

int _strlen(char *s)
{
	int i;
	int len = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		len++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     381       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: pointer
 * @src: pointer
 * @n: number of bytes
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0, k = 0;

	while (n > k)
	{
		if (src[k] == '\0')
		{
			for (; k < n; k++)
			{
				dest[i] = '\0';
				i++;
			}
		}
		else
		{
			dest[i] = src[k];
			k++;
			i++;
		}
	}
	return (dest);
}

3-islower.c/    0           0     0     644     241       `
#include "main.h"
/**
 * _islower - checks for lowercase characters
 * @c: takes in a character
 * Return: 0 for uppercase, 1 for lowercase
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     237       `
#include "main.h"

/**
 * _puts - prints a string followed by a new line
 * @str: takes in a string
 * Return: Always 0
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     282       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: int
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0, cmp = 0;

	while (s1[i] != '\0' && s2[i] != '\0' && cmp == 0)
	{
		cmp = s1[i] - s2[i];
		i++;
	}

	return (cmp);
}
3-strspn.c/     0           0     0     644     498       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: string
 * @accept: characcters that prefix substring must include
 * Return: length of prefix substring
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, a_len = 0, len = 0;

	while (accept[a_len] != '\0')
		a_len++;
	for (i = 0; s[i] != '\0'; i++)
		for (j = 0; j < a_len; j++)
			if (s[i] == accept[j])
				len++, j = a_len;
			else
				if (j == a_len - 1)
					goto exit;
exit: return (len);
}
4-isalpha.c/    0           0     0     644     261       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: takes a character
 * Return: 1 if letter, 0 if otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     372       `
#include "main.h"

/**
 * *_strpbrk - searches a string
 * @s: string
 * @accept: characters that can be matched
 * Return: pointer to matching char
 */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
		for (j = 0; accept[j] != '\0'; j++)
			if (s[i] == accept[j])
				goto exit;
exit: return (s[i] != '\0' ? s + i : '\0');
}
5-strstr.c/     0           0     0     644     459       `
#include "main.h"

/**
 * *_strstr - locates a substring
 * @haystack: string
 * @needle: substring
 * Return: pointer to beginning of located substring
 */

char *_strstr(char *haystack, char *needle)
{
	int i;

	while (*haystack != '\0')
	{
		i = 0;
		while (*haystack == *needle && *haystack != '\0' && *needle != '\0')
			haystack++, needle++, i++;
		if (*needle == '\0')
			return (haystack - i);
		haystack -= (i - 1), needle -= i;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     222       `
#include "main.h"
/**
 * _abs - computes absolute value of an integer
 * @n: takes in an integer
 * Return: n if positive or zero, -n if negative
 */
int _abs(int n)
{
	if (n < 0)
		return (n * -1);

	else
		return (n);
}
9-strcpy.c/     0           0     0     644     326       `
#include "main.h"

/**
 * *_strcpy - copies string to buffer pointed by dest
 * @dest: pointer
 * @src: ponts to a string
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i, len;

	for (len = 0; src[len] != '\0'; len++)
	{
	}

	for (i = 0; i <= len; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
